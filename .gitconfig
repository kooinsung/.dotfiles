;[user]
;	name = steve
;	email = steve@triple-corp.com
[alias]
    alias-basic = "!#----------------------------------------------------------;\n\
        git alias | head -7"
    co = checkout
    sw = switch
    swc = switch -c
    ps = push
    fps = push -f orgin
    pl = pull
    mg = merge
    ci = commit -m
    st = status
    rs = restore --staged
    rbc = rebase --continue
    rba = rebase --abort
    rbs = rebase --skip


    alias-log = "!#----------------------------------------------------------;\n\
        git alias | egrep 'log|commit-'"
    commit-select = "!# Select a commit hash from log graph.(로그 그래프에서 커밋 해시 선택);\n\
        git l \
        | fzf -m --ansi --layout=reverse --preview=\"echo {} | sed 's/^[*| ]*//g' | cut -d' ' -f1 | xargs git show --color=always \" \
        | sed 's/^[*| ]*//g' | cut -d' ' -f1"
    cis = "!git commit-select"
    commit-copy = "!# Select & copy a commit hash from log graph.(로그 그래프에서 커밋 해시 선택 및 복사);\n\
        git commit-select | pbcopy && echo Copied : `pbpaste`;"
    cic = "!git commit-copy"
    l = "log \
        --color --graph --decorate \
        --date=format:'%Y-%m-%d' \
        --abbrev-commit \
        --pretty=format:'%C(red)%h%C(auto)%d %s %C(green)(%cr)%C(bold blue) %an'"
    ld = "log \
        --color --graph --decorate \
        --date=format:'%Y-%m-%d %H:%M:%S' \
        --abbrev-commit \
        --pretty=format:'%C(red)%h%C(auto)%d %s %C(green)(%ad)%C(bold blue) %an'"
    ll = "log \
        --color --graph --decorate \
        --date=format:'%Y-%m-%d' \
        --abbrev-commit \
        --pretty=format:'%C(red)%H%C(auto)%d %s %C(green)(%cr)%C(bold blue) %an'"
    lld = "log \
        --color --graph --decorate \
        --date=format:'%Y-%m-%d %H:%M:%S' \
        --abbrev-commit \
        --pretty=format:'%C(red)%H%C(auto)%d %s %C(green)(%ad)%C(bold blue) %an'"
    lh = "!# Show log graph | head \n\
        f() { \
            if [ $# = 0 ]; then \
                git l -25; \
            else \
                git l -$1; \
            fi; \
            echo ''; \
        }; f"
    rk = "!# List commit counts of contributors(기여자의 커밋 수 나열);\n\
        git shortlog -sn"

    alias-branch = "!#----------------------------------------------------------;\n\
        git alias | egrep '[bB]ranch'"
    cb = "!# Print current branch.(현재 브랜치 이름 출력하기);\n\
        git branch | awk '/^\\*/{print $2}'"
    cbb = "!# Back up current branch.(현재 브랜치를 백업하는 브랜치 만들기);\n\
        echo created new branch: backup-`git cb`;\
        git branch backup-`git cb`"
    bb = "!# Branch tools. Type 'git bb help'.;\n\
        f() { \n\
            if [ $# = 0 ]; then \
                git branch-select | xargs git checkout; \
            elif [ $1 = 'help' ]; then \
                echo 'git bb           : Select and checkout branch'; \
                echo 'git bb c, clean  : Clean all merged branches'; \
                echo 'git bb d, D      : Delete seleted branches(D: force)'; \
                echo 'git bb l, list   : List branches excluding the current branch'; \
                echo 'git bb m, merged : List merged branches excluding the current and master branches'; \
            elif [ $1 = 'd' -o $1 = 'D' ]; then \
                git branch -$1 $(git bb list | fzf -m | awk '{print $2}'); \
            elif [ $1 = 'clean' -o $1 = 'c' ]; then \
                git branch-clean; \
            elif [ $1 = 'list' -o $1 = 'l' ]; then \
                git branch-list; \
            elif [ $1 = 'merged' -o $1 = 'm' ]; then \
                git branch-merged; \
            elif [ $1 = 'select' -o $1 = 's' ]; then \
                git branch-select; \
            else \
                git bb help; \
            fi; \
        }; f"
    branch-clean = "!# Search and delete merged branches.(병합 된 분기 검색 및 삭제);\n\
        curr_hash=`git show -s | head -1 | cut -d ' ' -f2`; \
        for branch in `find .git/refs -type f | fzf --ansi -m --preview=\"cat {} | xargs git l\"` ; do \
            hash=`cat $branch`; \
            if [ $hash = $curr_hash ]; then \
                continue; \
            fi; \
            git ll | egrep $hash -C 1; \
            read -p \"Delete $branch? [y|n] \" -r; \
            REPLY=${REPLY:-"n"}; \
            if [ $REPLY = \"y\" ]; then \
                rm $branch; \
                echo \"\\033[32m$branch \\033[0mhas been\\033[31m deleted\\033[0m.\n\"; \
            fi; \
        done"
    bcc = "!git branch-clean"
    branch-list = "!# List the branches.(브랜치 목록);\n\
        git for-each-ref --sort=-committerdate refs/heads --format='%(HEAD) %(refname:strip=2) | %(committerdate:relative) | %(authorname)' \
        | column -ts'|' \
        | sed 's/^ /./'"
    bcl = "!git branch-list"
    branch-select = "!# Select a branch.(브랜치 선택);\n\
        f() { \
            _height=$(stty size | awk '{print $1}');\
            git branch-list | fzf --preview \"git l {2} | head -n $_height\" | awk '{print $2}'; \
        }; f"
    bcs = "!git branch-select"
    ch = "!# Branch tools. Same with bb.;\n\
        git bb $1"
    alias-stage = "!#----------------------------------------------------------;\n\
        git alias | egrep '(add|diff|stage)' -i"
    a = "!# Select files and Add them.;\n\
        git diff-select | xargs git add"
    aci = "!# Add, Commit.;\n\
        git a; git commit"
    alias-stash = "!#----------------------------------------------------------;\n\
        git alias | grep stash"
    stash-apply = "!# Select a stash item and Apply it.;\n\
        git stash-op apply"
    ssa = "!git stash-apply"
    stash-drop= "!# Select the stash items and Drop them.;\n\
        for sid in $(git stash-select -m) ; do \
            git stash drop $sid; \
        done;"
    ssd = "!git stash-drop"
    stash-list = "!# List stash items.;\n\
        git stash list --pretty=format:\"%C(red)%gd%C(reset) %C(green)(%cr) %C(reset)%s\""
    ssl = "!git stash-list"
    stash-save = "!# Save changes into the stash stack.;\n \
        git diff-info; \
        read -p \"save message: \" msg; \
        git stash save \"$msg\""
    sss = "!git stash-save"
    alias-alias = "!#----------------------------------------------------------;\n\
        git alias | grep alias"
    alias = "!# Prints all aliases.;\n\
        git config --list | egrep '^alias.+' | sed -e 's/^alias\\.//' | sed -e 's/^[^=]*=/\\'$'\\033[31m&\\033[(B\\033[m/' | column -t -s'=' | sed 's/!#* *//; s/;$//' | cut -c1-85"
    alias-doctor = "!# Check the dependency tools.;\n\
    f() { \
        if [ $(which pygmentize | wc -l) -lt 1 ]; then \
            echo 'Not found : Pygments(pygmentize)'; \
            echo '    see     : http://pygments.org/'; \
            echo '    install : pip3 install Pygments'; \
            echo '';\
        fi; \
        if [ $(which fzf | wc -l) -lt 1 ]; then \
            echo 'Not found : fzf'; \
            echo '    see          : https://github.com/junegunn/fzf#installation'; \
            echo '    install(Mac) : brew install fzf'; \
            echo '    install(git) : git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf'; \
            echo '                   ~/.fzf/install'; \
            echo '';\
        fi; \
    }; f"
[core]
	autocrlf = input
